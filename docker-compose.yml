volumes:
    metadata_data: {}
    middle_var: {}
    historical_var: {}
    broker_var: {}
    coordinator_var: {}
    router_var: {}
    druid_shared: {}
    db: {}

services:
    api-layer:
        container_name: api-layer
        build:
            context: ./App/api_layer
            dockerfile: Dockerfile
        depends_on:
            - smtp
            - router
        environment:
            - SMTP_SERVER=host.docker.internal
            - SMTP_PORT=1025
            - SMTP_EMAIL=noreply@smartfactory.com
            - SMTP_PASSWORD=SmartAppPassword123
            - POSTGRES_HOST=db
            - POSTGRES_PORT=5432
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=FoolishPassword
            - POSTGRES_DB=postgres
        ports:
            - "8000:8000"

    frontend:
        container_name: frontend
        build:
            context: ./App/frontend
            dockerfile: Dockerfile
        ports:
            - 8080:80
        networks:
            - my-network
    smtp:
        image: mailhog/mailhog
        ports:
            - "1025:1025"
            - "8025:8025"
        environment:
            MH_OUTGOING_SMTP_USERNAME: "noreply@smartfactory.com"
            MH_OUTGOING_SMTP_PASSWORD: "SmartAppPassword123"

    postgres:
        container_name: postgres
        image: postgres:latest
        platform: linux/amd64
        volumes:
            - metadata_data:/var/lib/postgresql/data
        environment:
            - POSTGRES_PASSWORD=FoolishPassword
            - POSTGRES_USER=druid
            - POSTGRES_DB=druid

    # Need 3.5 or later for container nodes
    zookeeper:
        container_name: zookeeper
        image: zookeeper:3.5.10
        platform: linux/amd64
        ports:
            - "2181:2181"
        environment:
            - ZOO_MY_ID=1

    coordinator:
        image: apache/druid:31.0.0
        container_name: coordinator
        platform: linux/amd64
        volumes:
            - druid_shared:/opt/shared
            - coordinator_var:/opt/druid/var
            - ./obj_storage:/obj_storage
        depends_on:
            - zookeeper
            - postgres
        ports:
            - "8081:8081"
        command:
            - coordinator
        env_file:
            - environment

    broker:
        image: apache/druid:31.0.0
        container_name: broker
        platform: linux/amd64
        volumes:
            - broker_var:/opt/druid/var
        depends_on:
            - zookeeper
            - postgres
            - coordinator
        ports:
            - "8082:8082"
        command:
            - broker
        env_file:
            - environment

    historical:
        image: apache/druid:31.0.0
        container_name: historical
        platform: linux/amd64
        volumes:
            - druid_shared:/opt/shared
            - historical_var:/opt/druid/var
        depends_on:
            - zookeeper
            - postgres
            - coordinator
        ports:
            - "8083:8083"
        command:
            - historical
        env_file:
            - environment

    middlemanager:
        image: apache/druid:31.0.0
        container_name: middlemanager
        platform: linux/amd64
        volumes:
            - druid_shared:/opt/shared
            - middle_var:/opt/druid/var
            - ./obj_storage:/obj_storage
        depends_on:
            - zookeeper
            - postgres
            - coordinator
        ports:
            - "8091:8091"
            - "8100-8105:8100-8105"
        command:
            - middleManager
        env_file:
            - environment

    router:
        image: apache/druid:31.0.0
        container_name: router
        platform: linux/amd64
        volumes:
            - router_var:/opt/druid/var
        depends_on:
            - zookeeper
            - postgres
            - coordinator
        ports:
            - "8888:8888"
        command:
            - router
        env_file:
            - environment
    db:
        container_name: db
        env_file:
            - environment
        image: postgres:latest
        platform: linux/amd64
        ports:
            - "5432:5432"
        volumes:
            - db:/var/lib/postgresql/data
networks:
    my-network:
        driver: bridge
