name: Generate Python Documentation

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  generate-docs:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Get the list of changed files
    - name: Determine changed files
      id: changed-files
      uses: tj-actions/changed-files@v45.0.4
      with:
        files: "**/*.py"

    # Check if .py files were modified or if the trigger is manual
    - name: Check conditions for running
      if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
      run: |
        if [[ "${{ steps.changed-files.outputs.any_changed }}" == "false" ]]; then
          echo "No Python files changed. Skipping documentation generation."
          exit 0
        fi

    # Install Python and dependencies
    - name: Install Python and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip
        pip3 install --upgrade pip

    # Install required tools for Doxygen
    - name: Install Doxygen and tools
      run: |
        sudo apt-get install -y doxygen graphviz texlive-latex-base texlive-latex-extra texlive-fonts-recommended ghostscript

    # Run the preprocessing script to add groups
    # Run the preprocessing script to add groups
    - name: Run preprocessing script for grouping
      run: |
        python3 <<EOF
        import os

        repo_root = '.'
        source_folders = ['kb', 'database', 'data-processing', 'api', 'rag', 'kpi-engine']

        for folder in source_folders:
            folder_path = os.path.join(repo_root, folder)
            if not os.path.exists(folder_path):
                continue
            
            for subdir, _, files in os.walk(folder_path):
                group_name = os.path.basename(folder)
                for file in files:
                    if file.endswith('.py'):
                        file_path = os.path.join(subdir, file)
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                        if '@defgroup' in content:
                            continue
                        new_content = (
                            f"/** @defgroup {group_name} {group_name.capitalize()}\n"
                            f" *  @{{ */\n"
                            f"{content}\n"
                            f"/** @}} */\n"
                        )
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.write(new_content)
        print("Preprocessing completed.")
        EOF


    # Run Doxygen using the existing Doxyfile
    - name: Run Doxygen
      working-directory: ./docs
      run: doxygen Doxyfile

    # Compile the LaTeX output to PDF
    - name: Generate PDF from LaTeX
      working-directory: ./docs/latex
      run: |
        pdflatex refman.tex
        pdflatex refman.tex # Run twice for proper indexing

    # Rename the output PDF
    - name: Rename PDF
      working-directory: ./docs/latex
      run: mv refman.pdf api_docs.pdf

    # Upload PDF as an artifact
    - name: Upload documentation artifact
      uses: actions/upload-artifact@v3
      with:
        name: python-documentation
        path: docs/latex/api_docs.pdf
