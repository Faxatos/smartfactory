name: Build Docker Compose Services

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.parse-changes.outputs.changed }}
      matrix: ${{ steps.create_matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Detect changed files
        id: detect
        uses: tj-actions/changed-files@v45.0.4
        with:
          files: |
            database/**
            kb/**
            data-processing/**
            api/**
            rag/**
            gui-panel/**
            kpi-engine/**

      - name: Parse changed services
        id: parse-changes
        run: |
          services="database kb data-processing api rag gui-panel kpi-engine"
          changed_services=""
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Se il trigger Ã¨ workflow_dispatch, ricostruisci tutti i servizi
            changed_services="$services"
          else
            for service in $services; do
              # Utilizzo di '^' per matchare l'inizio del path e '/' per assicurarsi che sia una directory
              if [[ "${{ steps.detect.outputs.all_changed_files }}" =~ (^|[[:space:]])${service}/.*($|[[:space:]]) ]]; then
                changed_services="$changed_services $service"
              fi
            done
          fi
          changed_services=$(echo "$changed_services" | xargs)
          echo "Changed services: $changed_services"
          echo "::set-output name=changed::$changed_services"

      - name: Print changed containers
        run: |
          echo "Containers to be rebuilt: ${{ steps.parse-changes.outputs.changed }}"

      - name: Create dynamic matrix
        id: create_matrix
        run: |
          changed_services="${{ steps.parse-changes.outputs.changed }}"
          if [ -z "$changed_services" ]; then
            # Nessun servizio modificato
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          else
            # Trasforma la lista in array JSON
            services_json=$(echo "$changed_services" | tr ' ' '\n' | jq -R . | jq -s 'map({service: .})')
            echo "matrix={\"include\":$services_json}" >> $GITHUB_OUTPUT

  build-db-init:
    needs: detect-changes
    if: contains(needs.detect-changes.outputs.changed-services, 'database')
    concurrency: 
      group: build-db-init
      cancel-in-progress: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push database container
        uses: docker/build-push-action@v3
        with:
          context: ./database
          file: ./database/Dockerfile
          tags: |
            ghcr.io/${{ github.repository_owner }}/smartfactory/db-init:latest
            ghcr.io/${{ github.repository_owner }}/smartfactory/db-init:${{ steps.vars.outputs.sha_short }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-containers:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed-services != ''
    runs-on: ubuntu-latest
    concurrency: 
      group: build-containers-${{ matrix.service }}
      cancel-in-progress: false
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          tags: |
            ghcr.io/${{ github.repository_owner }}/smartfactory/${{ matrix.service }}:latest
            ghcr.io/${{ github.repository_owner }}/smartfactory/${{ matrix.service }}:${{ steps.vars.outputs.sha_short }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ matrix.service == 'kb' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}
